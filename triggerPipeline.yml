#This template is used to trigger a pipeline run using ado rest api.
#Steps in this template would only get executed when the pipeline is run from 'build.defaultBranch' (master) and 'build.triggerDeployment' variable is set to true.

#In order to use this template in pipeline, following pipeline variables must be set:
#- ado.runPipelineURL: Required. Already setup in 'AFS Build Variables' pipeline library. The rest endpoint to trigger a pipeline run
#- AzureDevOpsRestApiBuildUserAccessToken: Required. Already setup in 'Build Variables' pipeline library. The PAT to be used while calling the rest api endpoint.

#The template has following parameters, those can be passed while calling the template:
#- pipelineId: Required. The definition id of the pipeline to be triggered
#- pipelineVariables: Optional. Queue time pipeline variables to passed while triggering the pipeline. This should be a json format. Ex:
# [
#   {
#     "name": "VariableName1",
#     "value": "Value1"
#   },
#   {
#     "name": "VariableName2",
#     "value": "Value2"
#   }
# ] 
#- pipelineParameters: Optional. Runtime parameters to be passed while triggering the pipeline. This should be a json format. Ex:
# [
#   {
#     "name": "ParameterName1",
#     "value": "Value1"
#   },
#   {
#     "name": "ParameterName2",
#     "value": "Value2"
#   }
# ] 
#- pipelineDisplayName: Optional. Display name of the pipeline to be triggered. This would show up in step display name
#- setBuildIdInOutput: Optional. true | false. Indicates whether to set the triggered pipeline build id in ouput variable or not.
#- buildIdVariableName: Optional. Must be set when setBuildIdInOutput is 'true'. The template will use this variable name to set the build id in output varaible for further usage in the job/step.
#- stepName: Optional. Name of the step. Default value: 'TriggerPipeline'
#- executeCondition: Optional. Condition on which this step to be run.

parameters:
- name: pipelineId
  type: string

- name: pipelineVariables
  type: string

- name: pipelineParameters
  type: string

- name: buildIdVariableName
  type: string

- name: pipelineDisplayName
  type: string

- name: setBuildIdInOutput
  type: boolean
  default: true

- name: stepName
  type: string

- name: executeCondition
  type: string


steps:
- pwsh: |
    try {
      [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
      $url = "$(ado.runPipelineURL)".Replace('{pipelineId}', '${{ parameters.pipelineId }}')

      $base64EncodedAccessToken = [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes(("{0}:{1}" -f "", $env:ADOAccessToken)))
      $contentType = "application/json"
      $headers = @{ 
        Authorization = ("Basic {0}" -f $base64EncodedAccessToken)
      }

      $body = [PSCustomObject]@{
        resources = [PSCustomObject]@{
          repositories = [PSCustomObject]@{
            self = [PSCustomObject]@{
              refName = "refs/heads/master"
            }
          }
        }
        variables = [PSCustomObject]@{}
        templateParameters = [PSCustomObject]@{}
      } 

      $inputVariables = '${{ parameters.pipelineVariables }}' | ConvertFrom-Json -Depth 10
      $variables = [PSCustomObject]@{}
      if ($inputVariables) {
        $inputVariables | % {
          $variables | Add-Member -NotePropertyName $_.name -NotePropertyValue ''
          $variables."$($_.name)" = [PSCustomObject]@{
            isSecret = $false
            value = $_.value
          }
        }
      }

      $inputParameters = '${{ parameters.pipelineParameters }}' | ConvertFrom-Json -Depth 10
      $templateParameters = [PSCustomObject]@{}
      if ($inputParameters) {
        $inputParameters | % {
          $templateParameters | Add-Member -NotePropertyName $_.name -NotePropertyValue $_.value
        }
      }

      $body.variables = $variables
      $body.templateParameters = $templateParameters
      $jsonBody = $body | ConvertTo-Json -Depth 10

      $result = irm -Uri $url -Method Post -ContentType $contentType -Headers $headers -Body $jsonBody
      if($result -eq $null -or $result.id -le 0){
        Write-Host "##vso[task.logissue type=error]An error occurred while queuing the ${{ parameters.pipelineDisplayName }} pipeline run."
        Write-Host "##vso[task.complete result=Failed;]An error occurred while queuing the ${{ parameters.pipelineDisplayName }} pipeline run."
      }
      else {
        if ('${{ parameters.setBuildIdInOutput }}'.ToLower() -eq 'true') {
          Write-Host "Build Id: $($result.id)"
          Write-Host "##vso[task.setvariable variable=${{ parameters.buildIdVariableName }};isOutput=true]$($result.id)"
        }
        Write-Host "Triggered $($result.pipeline.name) pipeline with build id: $($result.id) and build number: $($result.name)."
      }
    }
    catch {
      throw $_
    }
  name: ${{ coalesce(parameters.stepName, 'TriggerPipeline') }}
  displayName: Trigger ${{ parameters.pipelineDisplayName }} Pipeline
  ${{ if parameters.executeCondition }}:
    condition: ${{ parameters.executeCondition }}
  retryCountOnTaskFailure: 1
  failOnStderr: true
  env:
    ADOAccessToken: $(AzureDevOpsRestApiBuildUserAccessToken)
